bsq
expected files: *.c *.h
allowed functions: malloc, calloc, realloc, free, fopen, fclose, getline, fscanf, fputs, fprintf, stderr, stdout, stdin, errno.

The aim of this program is to find the biggest square on a map avoiding obstacles. A file containing the map will be provided.
It'll have to be passed as an argument for your program.

The first line of the map contains information on how to read the map:
    - the number of the lines on the map;
    - the "empty" characters;
    - the "obstacle" characters;
    - the "full" characters;

The map is made up of '"empty" characters', lines and '"obstacle" characters'.
The aim of the program is to replace '"empty" characters' by '"full" characters' in order to represent the biggest square possible.
In the case that more than one solution exists, we'll choose to represent the square that's the closest to the top of the map, then the one that's most to the left.
When your program receives more than one map in argument, each solution or "map error" must be followed by a line break.
Should there be no passed arguments, your program must be able to read on the standard input.

Definition of a valid map:
    - all lines must have the same length.
    - there's at least one line of at least one box.
    - at each end of line, there's a line break.
    - the chars on the map can only be those introduced in the first line.
    - the map is invalid if a character is missing from the first line, or if two chars (of empty, full and obstacle) are identical.
    - the chars can be any printable character, even numbers.
    - the case of an invalid map, your program should display "map error" on the error output followed by a line break. Your program will then move on to the next map.

example:
% > cat example_file
9.Ox
...........................
....O......................
............O..............
.................
....O......................
...............O...........
...........................
......O..............O.....
..O.......O................
%> ./bsq example_file
.....xxxxxxx...............
....Oxxxxxxx...............
.....xxxxxxxO..............
.....xxxxxxx...............
....Oxxxxxxx...............
.....xxxxxxx...O...........
.....xxxxxxx...............
......O..............O.....
..O.......O................
%>
