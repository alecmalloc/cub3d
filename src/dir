casting/simplified.c:	cast.pos_x = cubed->game->pos[0];
casting/simplified.c:	cast.pos_y = cubed->game->pos[1];
casting/simplified.c:	cast.angle_d = cubed->game->dir;
game_mechanics/loop_cubed.c:	master->game->dir = master->parser->map->player_dir;
game_mechanics/loop_cubed.c:	master->game->pos[0] = master->parser->map->player_pos[0];
game_mechanics/loop_cubed.c:	master->game->pos[1] = master->parser->map->player_pos[1];
game_mechanics/loop_cubed.c:	master->game->map = master->parser->map->map;
game_mechanics/move_cubed.c:	new_x = (int)(game->pos[0] + *x);
game_mechanics/move_cubed.c:	new_y = (int)(game->pos[1] + *y);
game_mechanics/move_cubed.c:	old_x = (int)(game->pos[0]);
game_mechanics/move_cubed.c:	old_y = (int)(game->pos[1]);
game_mechanics/move_cubed.c:	if (game->map[new_y][old_x] == '1' || game->map[new_y][old_x] == '2')
game_mechanics/move_cubed.c:	if (game->map[old_y][new_x] == '1' || game->map[old_y][new_x] == '2')
game_mechanics/move_cubed.c:	for (int i = 0; master->game->map[i]; i++)
game_mechanics/move_cubed.c:		for (int i2 = 0; master->game->map[i][i2]; i2++)
game_mechanics/move_cubed.c:			if (i == (int)master->game->pos[1] && i2 == (int)master->game->pos[0])
game_mechanics/move_cubed.c:				printf("%c", master->game->map[i][i2]);
game_mechanics/move_cubed.c:	*x =(int)(master->game->pos[0] + master->game->dir_x * MOVESPEED);
game_mechanics/move_cubed.c:	*y = (int)(maste->game->pos[1] + master->game->dir_y * MOVESPEED);
game_mechanics/move_cubed.c:	if (master->game->map[*y][master->game->pos[0]] != "1" ||\
game_mechanics/move_cubed.c:		master->game->map[*y][master->game->pos[0]] != "2")
game_mechanics/move_cubed.c:	if (master->game->map[master->game->pos[1]][*x] != "1" ||\
game_mechanics/move_cubed.c:		master->game->map[master->game->pos[0]][*x] != "2")
game_mechanics/move_cubed.c:	*x =(int)(master->game->pos[0] + master->game->dir_x * MOVESPEED);
game_mechanics/move_cubed.c:	*y = (int)(maste->game->pos[1] - master->game->dir_y * MOVESPEED);
game_mechanics/move_cubed.c:	if (master->game->map[*y][master->game->pos[0]] != "1" ||\
game_mechanics/move_cubed.c:		master->game->map[*y][master->game->pos[0]] != "2")
game_mechanics/move_cubed.c:	if (master->game->map[master->game->pos[1]][*x] != "1" ||\
game_mechanics/move_cubed.c:		master->game->map[master->game->pos[0]][*x] != "2")
game_mechanics/move_cubed.c:	*x =(int)(master->game->pos[0] - master->game->dir_x * MOVESPEED);
game_mechanics/move_cubed.c:	*y = (int)(maste->game->pos[1] - master->game->dir_y * MOVESPEED);
game_mechanics/move_cubed.c:	if (master->game->map[*y][master->game->pos[0]] != "1" ||\
game_mechanics/move_cubed.c:		master->game->map[*y][master->game->pos[0]] != "2")
game_mechanics/move_cubed.c:	if (master->game->map[master->game->pos[1]][*x] != "1" ||\
game_mechanics/move_cubed.c:		master->game->map[master->game->pos[0]][*x] != "2")
game_mechanics/move_cubed.c:	*x =(int)(master->game->pos[0] - master->game->dir_x * MOVESPEED);
game_mechanics/move_cubed.c:	*y = (int)(maste->game->pos[1] + master->game->dir_y * MOVESPEED);
game_mechanics/move_cubed.c:	if (master->game->map[*y][master->game->pos[0]] != "1" ||\
game_mechanics/move_cubed.c:		master->game->map[*y][master->game->pos[0]] != "2")
game_mechanics/move_cubed.c:	if (master->game->map[master->game->pos[1]][*x] != "1" ||\
game_mechanics/move_cubed.c:		master->game->map[master->game->pos[0]][*x] != "2")
game_mechanics/move_cubed.c:	master->game->pos[0] += x;
game_mechanics/move_cubed.c:	master->game->pos[1] += y;
game_mechanics/rotate_door_cubed.c:	tmp = master->game->dir_x;
game_mechanics/rotate_door_cubed.c:	master->game->dir_x = master->game->dir_x * cos( ROTSPEED * dir) - master->game->dir_y\
game_mechanics/rotate_door_cubed.c:	master->game->dir_y = tmp * sin(ROTSPEED * dir) + master->game->dir_y * \
game_mechanics/rotate_door_cubed.c:	if (game->map[y][x] == '2')
game_mechanics/rotate_door_cubed.c:	else if (game->map[y][x] == '3')
game_mechanics/rotate_door_cubed.c:	x = master->game->pos[0];
game_mechanics/rotate_door_cubed.c:	y = master->game->pos[1];
game_mechanics/rotate_door_cubed.c:	if (infront(master->game->dir, &x, &y))
game_mechanics/rotate_door_cubed.c:			master->game->map[y][x] = '3';
game_mechanics/rotate_door_cubed.c:			master->game->map[y][x] = '2';
graphics/put_rays_cubed.c:		*wallx = master->game->pos[0] + master->draw->dist_to_wall * cast->\
graphics/put_rays_cubed.c:		*wallx = master->game->pos[1] + master->draw->dist_to_wall * cast->\
minimap/minimap_cubed.c:	else if ((int)master->game->map[y][x] == '1')
minimap/minimap_cubed.c:	else if ((int)master->game->map[y][x] == '2')
minimap/minimap_cubed.c:	else if ((int)master->game->map[y][x] == '4')
minimap/minimap_cubed.c:	if (x == (int)master->game->pos[0] && y == (int)master->game->pos[1])
minimap/minimap_cubed.c:	y = master->game->pos[1] - MINI_SIZE;
minimap/minimap_cubed.c:	while (y < master->game->pos[1] + MINI_SIZE)
minimap/minimap_cubed.c:		x = master->game->pos[0] - MINI_SIZE;
minimap/minimap_cubed.c:		while (x < master->game->pos[0] + MINI_SIZE)
minimap/minimap_player_cubed.c:	standart = (int)master->game->dir;
